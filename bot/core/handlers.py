import logging
import time
import traceback
from datetime import datetime
from typing import Dict, Any, Optional, List

import numpy as np
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

from bot.config import config.TOKEN, config.ALLOWED_USER_IDS, config.DEFAULT_SETTINGS, config.CURRENCY_GROUPS, config.TIMEFRAMES, config.MULTI_TIMEFRAMES, config.COLORS
from bot.services.technical import TechnicalAnalyzer
from bot.services.data_fetcher import get_ohlc_data, generate_test_data
from bot.utils.plotter import create_candlestick_plot, create_enhanced_plot
from bot.utils.helpers import (
    check_access, ensure_user_data, safe_answer_query, safe_edit_message,
    safe_delete_message, safe_send_message, add_message_to_cleanup,
    cleanup_messages
)
from bot.core.keyboards import (
    create_menu_buttons, create_settings_keyboard,
    create_currency_keyboard, create_pairs_keyboard,
    create_timeframes_keyboard
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data: Dict[int, Dict[str, Any]] = {}
user_messages: Dict[int, List[int]] = {}
tech_analyzer = TechnicalAnalyzer()

def setup_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞."""
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))
    app.add_error_handler(error_handler)

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not update.effective_user or update.effective_user.is_bot:
        return
    
    user_id = update.effective_user.id
    if not check_access(user_id):
        context.bot.send_message(chat_id=user_id, text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    cleanup_messages(context, update.effective_chat.id, user_id)
    ensure_user_data(user_id)['step'] = 'main_menu'
    
    buttons = [
        ("üìä –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", "start_analysis"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu"),
        ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
        ("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "reset_settings")
    ]
    
    msg_id = safe_send_message(
        context,
        update.effective_chat.id,
        "üìà <b>Forex Trading Bot</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_menu_buttons(buttons, back_button=False)
    )
    
    if msg_id:
        add_message_to_cleanup(user_id, msg_id)

def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    if not update.effective_user or not check_access(update.effective_user.id):
        return
    
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "- –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n"
        "- –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (5M, 15M, 1H, 4H)\n"
        "- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    msg_id = safe_send_message(
        context,
        update.effective_chat.id,
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ])
    )
    
    if msg_id:
        add_message_to_cleanup(update.effective_user.id, msg_id)

def button_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if not query or not query.from_user or query.from_user.is_bot or not check_access(query.from_user.id):
        return
    
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    if not safe_answer_query(query):
        return
    
    user_data = ensure_user_data(user_id)
    current_step = user_data.get('step', '')
    
    if query.data == 'start_analysis':
        buttons = [(f"üá™üá∫ EUR", 'currency_EUR'), 
                  (f"üá∫üá∏ USD", 'currency_USD'), 
                  (f"üá¨üáß GBP", 'currency_GBP'),
                  (f"üá¶üá∫ AUD", 'currency_AUD'),
                  (f"üáØüáµ JPY", 'currency_JPY'),
                  (f"üá®üá¶ CAD", 'currency_CAD'),
                  (f"üá®üá≠ CHF", 'currency_CHF'),
                  (f"‚Çø BTC", 'currency_BTC')]
        
        if not safe_edit_message(context, chat_id, message_id, "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>", create_menu_buttons(buttons, back_button=False)):
            cleanup_and_send(context, chat_id, user_id, "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>", buttons)
        user_data['step'] = 'select_currency'
    
    elif query.data.startswith('currency_'):
        currency = query.data.split('_')[1]
        pairs = CURRENCY_GROUPS.get(currency, [])
        buttons = [(pair, f'pair_{i}') for i, pair in enumerate(pairs)]
        if not safe_edit_message(context, chat_id, message_id, f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>", create_menu_buttons(buttons)):
            cleanup_and_send(context, chat_id, user_id, f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>", buttons)
        user_data['step'] = 'select_pair'
        user_data['currency'] = currency
    
    elif query.data.startswith('pair_'):
        pair_idx = int(query.data.split('_')[1])
        currency = user_data.get('currency', '')
        if pair_idx < len(CURRENCY_GROUPS.get(currency, [])):
            user_data['symbol'] = CURRENCY_GROUPS[currency][pair_idx]
            buttons = [(tf, f'tf_{i}') for i, tf in enumerate(TIMEFRAMES)]
            if not safe_edit_message(context, chat_id, message_id, f"üìä <b>–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {user_data['symbol']}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", create_menu_buttons(buttons)):
                cleanup_and_send(context, chat_id, user_id, f"üìä <b>–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {user_data['symbol']}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", buttons)
            user_data['step'] = 'select_timeframe'
        else:
            safe_answer_query(query, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã", True)
    
    elif query.data.startswith('tf_'):
        tf_idx = int(query.data.split('_')[1])
        if tf_idx < len(TIMEFRAMES):
            process_timeframe_selection(update, context, user_data, user_id, chat_id, tf_idx)
        else:
            safe_answer_query(query, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞", True)
    
    elif query.data == 'back':
        handle_back_action(update, context)
    elif query.data == 'back_to_main':
        start(update, context)
    elif query.data == 'settings_menu':
        show_settings_menu(update, context, user_id)
    elif query.data == 'reset_settings':
        user_data['settings'] = DEFAULT_SETTINGS.copy()
        user_data['optimized_params'] = {}
        safe_answer_query(query, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        show_settings_menu(update, context, user_id)
    elif query.data.startswith('set_'):
        handle_setting_selection(query, context, user_data, chat_id, message_id)

def process_timeframe_selection(update, context, user_data, user_id, chat_id, tf_idx):
    context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
    cleanup_messages(context, chat_id, user_id)
    
    try:
        symbol = user_data.get('symbol', '')
        timeframe = TIMEFRAMES[tf_idx]
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        optimized_settings = tech_analyzer.optimize_parameters(symbol, timeframe, user_id)
        user_data['settings'] = optimized_settings
        
        df = get_ohlc_data(symbol, timeframe)
        indicators = tech_analyzer.calculate_indicators(df, user_data['settings'])
        
        if indicators is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        
        signal, emoji, strength = tech_analyzer.generate_signal(df['close'].values, indicators)
        
        # –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if "BUY" in signal:
            if not tech_analyzer.check_multi_timeframe_confirmation(symbol, user_id, "BUY"):
                signal = "–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π " + signal
                strength = max(0, strength - 1)
        elif "SELL" in signal:
            if not tech_analyzer.check_multi_timeframe_confirmation(symbol, user_id, "SELL"):
                signal = "–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π " + signal
                strength = max(0, strength - 1)
        
        candle_plot = create_candlestick_plot(df, indicators)
        tech_plot = create_enhanced_plot(df, indicators)
        
        if candle_plot is None or tech_plot is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        
        send_analysis_results(context, chat_id, user_id, user_data, df, timeframe, candle_plot, tech_plot, signal, emoji, strength)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n{traceback.format_exc()}")
        msg_id = safe_send_message(
            context,
            chat_id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f'tf_{tf_idx}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)

def send_analysis_results(context, chat_id, user_id, user_data, df, timeframe, candle_plot, tech_plot, signal, emoji, strength):
    text = f"""
üìä <b>{user_data['symbol']} | {timeframe}</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîº <b>–¶–µ–Ω–∞:</b> {df['close'].iloc[-1]:.5f}
üîΩ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ (24—á):</b> {((df['close'].iloc[-1] - df['close'].iloc[-24])/df['close'].iloc[-24]*100):+.2f}%
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üöÄ <b>–°–∏–≥–Ω–∞–ª:</b> {emoji} {signal}
"""
    
    try:
        msg1 = context.bot.send_photo(
            chat_id=chat_id,
            photo=candle_plot,
            caption=f"<b>{user_data['symbol']} ({timeframe}) - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫</b>",
            parse_mode='HTML'
        )
        add_message_to_cleanup(user_id, msg1.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        raise
    
    try:
        msg2 = context.bot.send_photo(
            chat_id=chat_id,
            photo=tech_plot,
            caption=text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'tf_{TIMEFRAMES.index(timeframe)}'),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'currency_{user_data.get("currency", "")}')
                ]
            ])
        )
        add_message_to_cleanup(user_id, msg2.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
        raise

def show_settings_menu(update: Update, context: CallbackContext, user_id: int) -> None:
    settings = ensure_user_data(user_id)['settings']
    
    buttons = [
        [
            InlineKeyboardButton(f"üìä RSI: {settings['RSI_PERIOD']}", callback_data='set_rsi'),
            InlineKeyboardButton(f"üìâ MACD: {settings['MACD_FAST']}/{settings['MACD_SLOW']}", callback_data='set_macd')
        ],
        [
            InlineKeyboardButton(f"üìä BBands: {settings['BB_PERIOD']}/{settings['BB_STDDEV']}", callback_data='set_bb'),
            InlineKeyboardButton(f"üìà Stochastic: {settings['STOCH_K']}/{settings['STOCH_D']}", callback_data='set_stoch')
        ],
        [
            InlineKeyboardButton(f"üìä ADX: {settings['ADX_PERIOD']}", callback_data='set_adx'),
            InlineKeyboardButton(f"üìâ Supertrend: {settings['SUPERTREND_PERIOD']}/{settings['SUPERTREND_MULTIPLIER']}", callback_data='set_supertrend')
        ],
        [
            InlineKeyboardButton(f"üìä Ichimoku: {settings['ICHIMOKU_TENKAN']}/{settings['ICHIMOKU_KIJUN']}", callback_data='set_ichimoku'),
            InlineKeyboardButton(f"üìà EMA: {settings['EMA_FAST']}/{settings['EMA_SLOW']}", callback_data='set_ema')
        ],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    safe_edit_message(
        context,
        update.callback_query.message.chat_id,
        update.callback_query.message.message_id,
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        InlineKeyboardMarkup(buttons)
    )
    ensure_user_data(user_id)['step'] = 'settings_menu'

def handle_setting_selection(query, context, user_data, chat_id, message_id):
    setting = query.data.split('_')[1]
    user_data['step'] = f'set_{setting}'
    
    prompts = {
        'rsi': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ RSI (5-30):",
        'macd': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥—ã MACD –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±—ã—Å—Ç—Ä—ã–π/–º–µ–¥–ª–µ–Ω–Ω—ã–π/—Å–∏–≥–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12/26/9):",
        'bb': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Bollinger Bands –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–∏–æ–¥/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20/2):",
        'stoch': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥—ã Stochastic –≤ —Ñ–æ—Ä–º–∞—Ç–µ %K/%D (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14/3):",
        'adx': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ ADX (5-30):",
        'supertrend': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å Supertrend –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–∏–æ–¥/–º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10/3.0):",
        'ichimoku': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥—ã Ichimoku –≤ —Ñ–æ—Ä–º–∞—Ç–µ Tenkan/Kijun/Senkou (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9/26/52):",
        'ema': "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥—ã EMA –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±—ã—Å—Ç—Ä–∞—è/–º–µ–¥–ª–µ–Ω–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50/200):"
    }
    
    if not safe_edit_message(
        context,
        chat_id,
        message_id,
        prompts.get(setting, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:"),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
        ])
    ):
        cleanup_and_send(
            context,
            chat_id,
            query.from_user.id,
            prompts.get(setting, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:"),
            [("üîô –ù–∞–∑–∞–¥", 'settings_menu')]
        )

def handle_back_action(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = ensure_user_data(user_id)
    current_step = user_data.get('step', '')
    
    if current_step == 'select_pair':
        buttons = [(f"üá™üá∫ EUR", 'currency_EUR'), 
                  (f"üá∫üá∏ USD", 'currency_USD'), 
                  (f"üá¨üáß GBP", 'currency_GBP'),
                  (f"üá¶üá∫ AUD", 'currency_AUD'),
                  (f"üáØüáµ JPY", 'currency_JPY'),
                  (f"üá®üá¶ CAD", 'currency_CAD'),
                  (f"üá®üá≠ CHF", 'currency_CHF'),
                  (f"‚Çø BTC", 'currency_BTC')]
        
        if not safe_edit_message(
            context,
            query.message.chat_id,
            query.message.message_id,
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>",
            create_menu_buttons(buttons, back_button=False)
        ):
            cleanup_and_send(
                context,
                query.message.chat_id,
                user_id,
                "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>",
                buttons
            )
        user_data['step'] = 'select_currency'
    
    elif current_step == 'select_timeframe':
        currency = user_data.get('currency', '')
        pairs = CURRENCY_GROUPS.get(currency, [])
        buttons = [(pair, f'pair_{i}') for i, pair in enumerate(pairs)]
        
        if not safe_edit_message(
            context,
            query.message.chat_id,
            query.message.message_id,
            f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>",
            create_menu_buttons(buttons)
        ):
            cleanup_and_send(
                context,
                query.message.chat_id,
                user_id,
                f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>",
                buttons
            )
        user_data['step'] = 'select_pair'
    
    elif current_step.startswith('set_'):
        show_settings_menu(update, context, user_id)
    
    elif current_step == 'settings_menu':
        start(update, context)
    
    else:
        start(update, context)

def text_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not update.message or not update.message.from_user or update.message.from_user.is_bot or not check_access(update.message.from_user.id):
        return
    
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    text = update.message.text.strip()
    user_data = ensure_user_data(user_id)
    
    if user_data.get('step', '').startswith('set_'):
        handle_settings_input(update, context, user_id, text)
    else:
        cleanup_messages(context, chat_id, user_id)
        msg_id = safe_send_message(
            context,
            chat_id,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)

def handle_settings_input(update: Update, context: CallbackContext, user_id: int, text: str) -> None:
    if not check_access(user_id):
        return
    
    chat_id = update.message.chat_id
    cleanup_messages(context, chat_id, user_id)
    user_data = ensure_user_data(user_id)
    settings = user_data['settings']
    current_step = user_data['step']
    
    setting_map = {
        'set_rsi': ('RSI_PERIOD', lambda x: x.isdigit() and 5 <= int(x) <= 30, int),
        'set_macd': (['MACD_FAST', 'MACD_SLOW', 'MACD_SIGNAL'], 
                    lambda x: len(x.split('/')) == 3 and all(i.isdigit() and 5 <= int(i) <= 50 for i in x.split('/')[:2]) and x.split('/')[2].isdigit() and 5 <= int(x.split('/')[2]) <= 20,
                    lambda x: list(map(int, x.split('/')))),
        'set_bb': (['BB_PERIOD', 'BB_STDDEV'], 
                  lambda x: len(x.split('/')) == 2 and x.split('/')[0].isdigit() and 5 <= int(x.split('/')[0]) <= 50 and x.split('/')[1].isdigit() and 1 <= int(x.split('/')[1]) <= 3,
                  lambda x: list(map(int, x.split('/')))),
        'set_stoch': (['STOCH_K', 'STOCH_D'], 
                     lambda x: len(x.split('/')) == 2 and x.split('/')[0].isdigit() and 5 <= int(x.split('/')[0]) <= 30 and x.split('/')[1].isdigit() and 1 <= int(x.split('/')[1]) <= 10,
                     lambda x: list(map(int, x.split('/')))),
        'set_adx': ('ADX_PERIOD', lambda x: x.isdigit() and 5 <= int(x) <= 30, int),
        'set_supertrend': (['SUPERTREND_PERIOD', 'SUPERTREND_MULTIPLIER'], 
                          lambda x: len(x.split('/')) == 2 and x.split('/')[0].isdigit() and 5 <= int(x.split('/')[0]) <= 30 and x.split('/')[1].replace('.', '').isdigit() and 1.0 <= float(x.split('/')[1]) <= 5.0,
                          lambda x: [int(x.split('/')[0]), float(x.split('/')[1])]),
        'set_ichimoku': (['ICHIMOKU_TENKAN', 'ICHIMOKU_KIJUN', 'ICHIMOKU_SENKOU'], 
                        lambda x: len(x.split('/')) == 3 and all(i.isdigit() and 5 <= int(i) <= 100 for i in x.split('/')),
                        lambda x: list(map(int, x.split('/')))),
        'set_ema': (['EMA_FAST', 'EMA_SLOW'],
                   lambda x: len(x.split('/')) == 2 and x.split('/')[0].isdigit() and 5 <= int(x.split('/')[0]) <= 100 and x.split('/')[1].isdigit() and 50 <= int(x.split('/')[1]) <= 300,
                   lambda x: list(map(int, x.split('/'))))
    }
    
    setting_name, validation_func, conversion_func = setting_map.get(current_step, (None, None, None))
    
    try:
        if validation_func and validation_func(text):
            values = conversion_func(text) if conversion_func else text
            if isinstance(setting_name, list):
                for name, value in zip(setting_name, values):
                    settings[name] = value
            else:
                settings[setting_name] = values
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            user_data['optimized_params'] = {}
                
            msg_id = safe_send_message(
                context,
                chat_id,
                f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                ])
            )
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
            user_data['step'] = 'settings_menu'
        else:
            msg_id = safe_send_message(context, chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
    except ValueError:
        msg_id = safe_send_message(context, chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)

def error_handler(update: Optional[Update], context: CallbackContext, error: Exception) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logging.error(f"–û—à–∏–±–∫–∞: {str(error)}\n{traceback.format_exc()}")
    
    try:
        if update and update.message:
            chat_id = update.message.chat_id
            user_id = update.message.from_user.id
            cleanup_messages(context, chat_id, user_id)
            msg_id = safe_send_message(
                context,
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
        elif update and update.callback_query and update.callback_query.message:
            chat_id = update.callback_query.message.chat_id
            user_id = update.callback_query.from_user.id
            cleanup_messages(context, chat_id, user_id)
            msg_id = safe_send_message(
                context,
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {str(e)}")

def cleanup_and_send(context: CallbackContext, chat_id: int, user_id: int, text: str, buttons_data: list):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ."""
    cleanup_messages(context, chat_id, user_id)
    msg_id = safe_send_message(
        context,
        chat_id,
        text,
        reply_markup=create_menu_buttons(buttons_data)
    )
    if msg_id:
        add_message_to_cleanup(user_id, msg_id)
