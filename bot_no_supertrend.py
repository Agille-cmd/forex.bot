import logging
import os
from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ChatAction, Update
from telegram.ext import CallbackContext
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import seaborn as sns
import io
from datetime import datetime, timedelta
import traceback
import mplfinance as mpf
from typing import Dict, Any, Optional, List
import requests
import time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è ID –±–æ—Ç–∞
BOT_ID = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
ALLOWED_USER_IDS = {
    7785586524,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)
    7064593003   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ ID (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
}

def check_access(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É"""
    return user_id in ALLOWED_USER_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

TOKEN ='7736019500:AAGIYP_E3oNv6_60JEI8jyxgoxKLWg_jIXg'
TWELVE_DATA_KEY ='80caddf1ddcd4f1b983d21d31c8bc180'

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
if not TWELVE_DATA_KEY:
    raise ValueError("TWELVE_DATA_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_SETTINGS = {
    'RSI_PERIOD': 14,
    'MACD_FAST': 12,
    'MACD_SLOW': 26,
    'MACD_SIGNAL': 9,
    'BB_PERIOD': 20,
    'BB_STDDEV': 2,
    'STOCH_K': 14,
    'STOCH_D': 3,
    'ADX_PERIOD': 14,
}

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –ø–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
CURRENCY_GROUPS = {
    'EUR': ['EUR/USD', 'EUR/GBP', 'EUR/JPY', 'EUR/AUD', 'EUR/CAD', 'EUR/CHF'],
    'USD': ['USD/JPY', 'USD/CAD', 'USD/CHF', 'AUD/USD', 'GBP/USD', 'NZD/USD'],
    'GBP': ['GBP/USD', 'GBP/JPY', 'GBP/AUD', 'GBP/CAD', 'GBP/CHF', 'GBP/NZD'],
    'AUD': ['AUD/USD', 'AUD/JPY', 'AUD/NZD', 'AUD/CAD', 'AUD/CHF'],
    'JPY': ['USD/JPY', 'EUR/JPY', 'GBP/JPY', 'AUD/JPY', 'CAD/JPY', 'CHF/JPY'],
    'CAD': ['USD/CAD', 'EUR/CAD', 'GBP/CAD', 'AUD/CAD', 'CAD/JPY', 'CAD/CHF'],
    'CHF': ['USD/CHF', 'EUR/CHF', 'GBP/CHF', 'AUD/CHF', 'CAD/CHF', 'CHF/JPY'],
    'BTC': ['BTC/USD', 'BTC/EUR', 'BTC/JPY', 'BTC/GBP']
}

TIMEFRAMES = ['5M', '15M', '1H', '4H']
user_data: Dict[int, Dict[str, Any]] = {}
user_messages: Dict[int, List[int]] = {}

def ensure_user_data(user_id: int) -> Dict[str, Any]:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö"""
    if user_id not in user_data:
        user_data[user_id] = {
            'settings': DEFAULT_SETTINGS.copy(),
            'last_activity': time.time(),
            'step': 'main_menu'
        }
    return user_data[user_id]

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è Telegram API
def safe_answer_query(query, text: str = None, show_alert: bool = False) -> bool:
    try:
        query.answer(text=text, show_alert=show_alert)
        return True
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer_query: {str(e)}")
        return False

def safe_edit_message(context: CallbackContext, chat_id: int, message_id: int, 
                     text: str, reply_markup: InlineKeyboardMarkup = None) -> bool:
    try:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        if "Message is not modified" not in str(e):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_message: {str(e)}")
        return False

def safe_delete_message(context: CallbackContext, chat_id: int, message_id: int) -> bool:
    try:
        context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ delete_message: {str(e)}")
        return False

def safe_send_message(context: CallbackContext, chat_id: int, text: str, 
                     reply_markup: InlineKeyboardMarkup = None) -> Optional[int]:
    try:
        msg = context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ send_message: {str(e)}")
        return None

# –£—Ç–∏–ª–∏—Ç—ã
def create_menu_buttons(buttons_data: list, back_button: bool = True) -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons_data]
    if back_button:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(keyboard)

def get_user_settings(user_id: int) -> Dict[str, Any]:
    user_data = ensure_user_data(user_id)
    if 'settings' not in user_data:
        user_data['settings'] = DEFAULT_SETTINGS.copy()
    user_data['last_activity'] = time.time()
    return user_data['settings']

def safe_get_message(update: Update) -> Optional[Any]:
    try:
        if update.message:
            return update.message
        elif update.callback_query and update.callback_query.message:
            return update.callback_query.message
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ safe_get_message: {str(e)}")
        return None

def cleanup_messages(context: CallbackContext, chat_id: int, user_id: int):
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                safe_delete_message(context, chat_id, msg_id)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        user_messages[user_id] = []

def add_message_to_cleanup(user_id: int, message_id: int):
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(message_id)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Twelve Data API
def get_ohlc_data(symbol: str = "EUR/USD", timeframe: str = "1H") -> pd.DataFrame:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –°–í–ï–ñ–ò–• –¥–∞–Ω–Ω—ã—Ö —Å Twelve Data API"""
    try:
        interval_map = {
            '5M': '5min',
            '15M': '15min',
            '1H': '1h',
            '4H': '4h'
        }
        interval = interval_map.get(timeframe, '1h')
        
        symbol_mapping = {
            'EUR/USD': 'EUR/USD',
            'GBP/USD': 'GBP/USD',
            'USD/JPY': 'USD/JPY',
            'AUD/USD': 'AUD/USD',
            'BTC/USD': 'BTC/USD',
            'EUR/GBP': 'EUR/GBP',
            'EUR/JPY': 'EUR/JPY',
            'EUR/AUD': 'EUR/AUD',
            'EUR/CAD': 'EUR/CAD',
            'EUR/CHF': 'EUR/CHF',
            'USD/CAD': 'USD/CAD',
            'USD/CHF': 'USD/CHF',
            'GBP/JPY': 'GBP/JPY',
            'GBP/AUD': 'GBP/AUD',
            'GBP/CAD': 'GBP/CAD',
            'GBP/CHF': 'GBP/CHF',
            'GBP/NZD': 'GBP/NZD',
            'AUD/JPY': 'AUD/JPY',
            'AUD/NZD': 'AUD/NZD',
            'AUD/CAD': 'AUD/CAD',
            'AUD/CHF': 'AUD/CHF',
            'CAD/JPY': 'CAD/JPY',
            'CAD/CHF': 'CAD/CHF',
            'CHF/JPY': 'CHF/JPY',
            'NZD/USD': 'NZD/USD',
            'BTC/EUR': 'BTC/EUR',
            'BTC/JPY': 'BTC/JPY',
            'BTC/GBP': 'BTC/GBP'
        }
        
        symbol_code = symbol_mapping.get(symbol, symbol)
        url = "https://api.twelvedata.com/time_series"
        params = {
            'symbol': symbol_code,
            'interval': interval,
            'apikey': TWELVE_DATA_KEY,
            'outputsize': 100,
            'format': 'JSON',
            'timestamp': int(time.time())
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({timeframe})")
        response = requests.get(url, params=params, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        if data.get('status') != 'ok' or 'values' not in data:
            raise ValueError(data.get('message', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API'))
            
        df = pd.DataFrame(data['values'])
        df = df.rename(columns={
            'datetime': 'date',
            'open': 'open',
            'high': 'high',
            'low': 'low',
            'close': 'close'
        })
        
        df['date'] = pd.to_datetime(df['date'])
        df = df.set_index('date').sort_index()
        df = df.apply(pd.to_numeric)
        df = df.dropna()
        
        if df.empty:
            raise ValueError("–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} ({timeframe}), –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: {df.index[-1]}")
        return df[['open', 'high', 'low', 'close']]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n{traceback.format_exc()}")
        now = datetime.now()
        np.random.seed(int(now.timestamp()))
        
        periods_map = {'5M': 288, '15M': 96, '1H': 100, '4H': 50}
        periods = periods_map.get(timeframe, 100)
        base_price = 1.0 if 'USD' in symbol else 100.0
        
        prices = base_price + np.random.normal(0, 0.02, periods).cumsum()
        dates = pd.date_range(end=now, periods=periods, freq=interval.lower())
        
        return pd.DataFrame({
            'date': dates,
            'open': prices,
            'high': prices + np.abs(np.random.normal(0.001, 0.002, periods)),
            'low': prices - np.abs(np.random.normal(0.001, 0.002, periods)),
            'close': prices + np.random.normal(0, 0.001, periods)
        }).set_index('date')

# –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
def calculate_indicators(df: pd.DataFrame, user_id: int) -> Optional[Dict[str, Any]]:
    try:
        settings = get_user_settings(user_id)
        close = df['close'].values
        high = df['high'].values
        low = df['low'].values
        
        min_period = max(settings['RSI_PERIOD'], settings['MACD_SLOW'])
                         settings['BB_PERIOD'], settings['STOCH_K'], settings['ADX_PERIOD'],
        if len(close) < min_period:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {min_period} —Ç–æ—á–µ–∫.")
        
        # RSI
        delta = np.diff(close)
        gain = np.where(delta > 0, delta, 0)
        loss = np.where(delta < 0, -delta, 0)
        
        avg_gain = pd.Series(gain).rolling(settings['RSI_PERIOD']).mean().values
        avg_loss = pd.Series(loss).rolling(settings['RSI_PERIOD']).mean().values
        
        with np.errstate(divide='ignore', invalid='ignore'):
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
        
        # MACD
        ema12 = pd.Series(close).ewm(span=settings['MACD_FAST'], adjust=False).mean().values
        ema26 = pd.Series(close).ewm(span=settings['MACD_SLOW'], adjust=False).mean().values
        macd = ema12 - ema26
        signal = pd.Series(macd).ewm(span=settings['MACD_SIGNAL'], adjust=False).mean().values
        
        # Bollinger Bands
        sma = pd.Series(close).rolling(settings['BB_PERIOD']).mean().values
        std = pd.Series(close).rolling(settings['BB_PERIOD']).std().values
        upper = sma + (std * settings['BB_STDDEV'])
        lower = sma - (std * settings['BB_STDDEV'])
        
        # Stochastic Oscillator
        stoch_k = np.zeros_like(close)
        for i in range(settings['STOCH_K']-1, len(close)):
            window_high = high[i-settings['STOCH_K']+1:i+1].max()
            window_low = low[i-settings['STOCH_K']+1:i+1].min()
            stoch_k[i] = 100 * (close[i] - window_low) / (window_high - window_low + 1e-10)
        
        stoch_d = pd.Series(stoch_k).rolling(settings['STOCH_D']).mean().values
        
        # ADX
        tr1 = pd.Series(high - low).rolling(settings['ADX_PERIOD']).sum().values
        tr2 = pd.Series(abs(high - np.roll(close, 1))).rolling(settings['ADX_PERIOD']).sum().values
        tr3 = pd.Series(abs(low - np.roll(close, 1))).rolling(settings['ADX_PERIOD']).sum().values
        tr = np.maximum(np.maximum(tr1, tr2), tr3)
        
        up_move = high - np.roll(high, 1)
        down_move = np.roll(low, 1) - low
        
        plus_dm = np.where((up_move > down_move) & (up_move > 0), up_move, 0)
        minus_dm = np.where((down_move > up_move) & (down_move > 0), down_move, 0)
        
        plus_di = 100 * pd.Series(plus_dm).rolling(settings['ADX_PERIOD']).sum().values / tr
        minus_di = 100 * pd.Series(minus_dm).rolling(settings['ADX_PERIOD']).sum().values / tr
        
        dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di + 1e-10)
        adx = pd.Series(dx).rolling(settings['ADX_PERIOD']).mean().values
        
        hl2 = (high + low) / 2
        
        trend = 1  # 1 = uptrend, -1 = downtrend
        
        for i in range(1, len(close)):
                trend = 1
                trend = -1
            
            if trend == 1:
            else:
        
        return {
            'rsi': np.concatenate(([np.nan], rsi)),
            'macd': macd,
            'signal': signal,
            'upper': upper,
            'middle': sma,
            'lower': lower,
            'stoch_k': stoch_k,
            'stoch_d': stoch_d,
            'plus_di': plus_di,
            'minus_di': minus_di,
            'adx': adx,
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}\n{traceback.format_exc()}")
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
def generate_signal(close: np.ndarray, indicators: Dict[str, Any]) -> tuple:
    if indicators is None:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤", "‚ö†Ô∏è", 0
    
    signals = []
    buy_signals = 0
    sell_signals = 0
    strength = 0
    
    last_rsi = indicators['rsi'][-1]
    if not np.isnan(last_rsi):
        if last_rsi > 70:
            signals.append("RSI > 70 (–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
            sell_signals += 1
            strength += 1
        elif last_rsi < 30:
            signals.append("RSI < 30 (–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            buy_signals += 1
            strength += 1
    
    if len(indicators['macd']) > 1 and len(indicators['signal']) > 1:
        if indicators['macd'][-1] > indicators['signal'][-1] and indicators['macd'][-2] <= indicators['signal'][-2]:
            signals.append("MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö")
            buy_signals += 1
            strength += 1
        elif indicators['macd'][-1] < indicators['signal'][-1] and indicators['macd'][-2] >= indicators['signal'][-2]:
            signals.append("MACD –ø–µ—Ä–µ—Å–µ–∫ —Å–∏–≥–Ω–∞–ª —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑")
            sell_signals += 1
            strength += 1
    
    if len(close) > 0 and 'upper' in indicators and 'lower' in indicators:
        if close[-1] < indicators['lower'][-1]:
            signals.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
            buy_signals += 1
            strength += 2
        elif close[-1] > indicators['upper'][-1]:
            signals.append("–¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞")
            sell_signals += 1
            strength += 2
    
    if 'stoch_k' in indicators and 'stoch_d' in indicators:
        if indicators['stoch_k'][-1] < 20 and indicators['stoch_d'][-1] < 20:
            signals.append("Stochastic –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏")
            buy_signals += 1
            strength += 1
        elif indicators['stoch_k'][-1] > 80 and indicators['stoch_d'][-1] > 80:
            signals.append("Stochastic –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏")
            sell_signals += 1
            strength += 1
        
        if indicators['stoch_k'][-1] > indicators['stoch_d'][-1] and indicators['stoch_k'][-2] <= indicators['stoch_d'][-2]:
            signals.append("Stochastic %K –ø–µ—Ä–µ—Å–µ–∫ %D —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö")
            buy_signals += 1
        elif indicators['stoch_k'][-1] < indicators['stoch_d'][-1] and indicators['stoch_k'][-2] >= indicators['stoch_d'][-2]:
            signals.append("Stochastic %K –ø–µ—Ä–µ—Å–µ–∫ %D —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑")
            sell_signals += 1
    
    if 'adx' in indicators and 'plus_di' in indicators and 'minus_di' in indicators:
        if indicators['adx'][-1] > 25:
            if indicators['plus_di'][-1] > indicators['minus_di'][-1]:
                signals.append("ADX > 25 —Å –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º")
                buy_signals += 1
                strength += 2
            elif indicators['plus_di'][-1] < indicators['minus_di'][-1]:
                signals.append("ADX > 25 —Å –Ω–∏—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º")
                sell_signals += 1
                strength += 2
    
            buy_signals += 1
            strength += 2
        else:
            sell_signals += 1
            strength += 2
    
    if not signals:
        return "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", "‚ö™", 0
    
    strength = min(max(strength, 0), 5)
    
    if buy_signals >= 3 and strength >= 3:
        return "–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£", "üü¢", strength
    elif sell_signals >= 3 and strength >= 3:
        return "–°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£", "üî¥", strength
    elif buy_signals >= 2 and strength >= 2:
        return "–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£", "üü°", strength
    elif sell_signals >= 2 and strength >= 2:
        return "–°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£", "üü†", strength
    elif buy_signals >= 1:
        return "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£", "üîµ", strength
    elif sell_signals >= 1:
        return "–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£", "üü£", strength
    else:
        return "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã", "‚ö™", strength

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
def create_candlestick_plot(df: pd.DataFrame) -> io.BytesIO:
    try:
        mc = mpf.make_marketcolors(up='g', down='r')
        s = mpf.make_mpf_style(marketcolors=mc)
        
        buf = io.BytesIO()
        mpf.plot(df, type='candle', style=s, volume=False, 
                savefig=dict(fname=buf, dpi=100, bbox_inches='tight'))
        buf.seek(0)
        return buf
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}\n{traceback.format_exc()}")
        return None

def create_technical_plot(df: pd.DataFrame, indicators: Dict[str, Any]) -> io.BytesIO:
    try:
        plt.figure(figsize=(14, 18), dpi=100)
        
        ax1 = plt.subplot2grid((6, 1), (0, 0), rowspan=2)
        ax1.plot(df.index, df['close'], label='–¶–µ–Ω–∞', color='royalblue', linewidth=1)
        if 'upper' in indicators and 'middle' in indicators and 'lower' in indicators:
            ax1.plot(df.index, indicators['upper'], label='–í–µ—Ä—Ö–Ω—è—è BB', color='orange', linestyle='--', linewidth=1)
            ax1.plot(df.index, indicators['middle'], label='–°—Ä–µ–¥–Ω—è—è BB', color='green', linestyle='--', linewidth=1)
            ax1.plot(df.index, indicators['lower'], label='–ù–∏–∂–Ω—è—è BB', color='orange', linestyle='--', linewidth=1)
            ax1.fill_between(df.index, indicators['upper'], indicators['lower'], color='orange', alpha=0.1)
        
        
        ax1.set_title('–¶–µ–Ω–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏')
        ax1.legend(loc='upper left')
        ax1.grid(True, alpha=0.3)
        
        ax2 = plt.subplot2grid((6, 1), (2, 0))
        if 'macd' in indicators and 'signal' in indicators:
            ax2.plot(df.index, indicators['macd'], label='MACD', color='blue', linewidth=1)
            ax2.plot(df.index, indicators['signal'], label='–°–∏–≥–Ω–∞–ª', color='red', linewidth=1)
            ax2.fill_between(df.index, indicators['macd'], indicators['signal'],
                           where=indicators['macd']>indicators['signal'],
                           facecolor='green', alpha=0.3)
            ax2.fill_between(df.index, indicators['macd'], indicators['signal'],
                           where=indicators['macd']<=indicators['signal'],
                           facecolor='red', alpha=0.3)
            ax2.axhline(0, color='black', linestyle='--', linewidth=0.5)
        ax2.set_title('MACD')
        ax2.legend(loc='upper left')
        ax2.grid(True, alpha=0.3)
        
        ax3 = plt.subplot2grid((6, 1), (3, 0))
        if 'rsi' in indicators:
            ax3.plot(df.index, indicators['rsi'], label='RSI', color='purple', linewidth=1)
            ax3.axhline(70, linestyle='--', color='red', alpha=0.5)
            ax3.axhline(30, linestyle='--', color='green', alpha=0.5)
            ax3.fill_between(df.index, indicators['rsi'], 70, where=indicators['rsi']>=70,
                            facecolor='red', alpha=0.1)
            ax3.fill_between(df.index, indicators['rsi'], 30, where=indicators['rsi']<=30,
                            facecolor='green', alpha=0.1)
        ax3.set_title('RSI')
        ax3.legend(loc='upper left')
        ax3.grid(True, alpha=0.3)
        
        ax4 = plt.subplot2grid((6, 1), (4, 0))
        if 'stoch_k' in indicators and 'stoch_d' in indicators:
            ax4.plot(df.index, indicators['stoch_k'], label='%K', color='blue', linewidth=1)
            ax4.plot(df.index, indicators['stoch_d'], label='%D', color='red', linewidth=1)
            ax4.axhline(80, linestyle='--', color='red', alpha=0.5)
            ax4.axhline(20, linestyle='--', color='green', alpha=0.5)
            ax4.fill_between(df.index, indicators['stoch_k'], 80, where=indicators['stoch_k']>=80,
                            facecolor='red', alpha=0.1)
            ax4.fill_between(df.index, indicators['stoch_k'], 20, where=indicators['stoch_k']<=20,
                            facecolor='green', alpha=0.1)
        ax4.set_title('Stochastic Oscillator')
        ax4.legend(loc='upper left')
        ax4.grid(True, alpha=0.3)
        
        ax5 = plt.subplot2grid((6, 1), (5, 0))
        if 'adx' in indicators and 'plus_di' in indicators and 'minus_di' in indicators:
            ax5.plot(df.index, indicators['adx'], label='ADX', color='black', linewidth=1)
            ax5.plot(df.index, indicators['plus_di'], label='+DI', color='green', linewidth=1)
            ax5.plot(df.index, indicators['minus_di'], label='-DI', color='red', linewidth=1)
            ax5.axhline(25, linestyle='--', color='blue', alpha=0.5)
        ax5.set_title('ADX')
        ax5.legend(loc='upper left')
        ax5.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close()
        return buf
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}\n{traceback.format_exc()}")
        return None

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
def start(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if update.effective_user and update.effective_user.id == BOT_ID:
        return

    try:
        message = safe_get_message(update)
        if not message:
            return
            
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
        if message.from_user.is_bot:
            logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –±–æ—Ç–∞ —Å ID: {user_id}")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_access(user_id):
            try:
                context.bot.send_message(
                    chat_id=user_id,
                    text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ: {str(e)}")
            return
            
        chat_id = message.chat_id
        cleanup_messages(context, chat_id, user_id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ensure_user_data –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        user_data = ensure_user_data(user_id)
        user_data['step'] = 'main_menu'
        
        buttons = [
            ("üìä –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", "start_analysis"),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings_menu"),
            ("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
            ("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "reset_settings")
        ]
        
        msg_id = safe_send_message(
            context,
            chat_id,
            "üìà <b>Forex Trading Bot</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_menu_buttons(buttons, back_button=False)
        )
        
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)
    except Exception as e:
        error_handler(update, context, e)

def help_command(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if update.effective_user and update.effective_user.id == BOT_ID:
        return

    try:
        message = safe_get_message(update)
        if not message:
            return
            
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_access(user_id):
            return
            
        chat_id = message.chat_id
        cleanup_messages(context, chat_id, user_id)
        
        text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "- –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n"
            "- –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (5M, 15M, 1H, 4H)\n"
            "- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤–∞–ª—é—Ç:</b>\n"
            "‚Ä¢ EUR - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –µ–≤—Ä–æ\n"
            "‚Ä¢ USD - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
            "‚Ä¢ GBP - –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç\n"
            "‚Ä¢ AUD - –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
            "‚Ä¢ JPY - –Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞\n"
            "‚Ä¢ CAD - –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
            "‚Ä¢ CHF - –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫\n"
            "‚Ä¢ BTC - –ë–∏—Ç–∫–æ–∏–Ω\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã:</b>\n"
            "‚Ä¢ 5M - 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 15M - 15 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ 1H - 1 —á–∞—Å\n"
            "‚Ä¢ 4H - 4 —á–∞—Å–∞\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>\n"
            "- RSI (Relative Strength Index)\n"
            "- MACD (Moving Average Convergence Divergence)\n"
            "- Bollinger Bands\n"
            "- Stochastic Oscillator\n"
            "- ADX (Average Directional Index)\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤–∞–ª—é—Ç\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º\n"
            "5. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n\n"
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"
        )
        
        msg_id = safe_send_message(
            context,
            chat_id,
            text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)
    except Exception as e:
        error_handler(update, context, e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if update.effective_user and update.effective_user.id == BOT_ID:
        return

    query = update.callback_query
    if not query:
        return
        
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
    if query.from_user.is_bot:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –±–æ—Ç–∞ —Å ID: {user_id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not check_access(user_id):
        safe_answer_query(query, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É", show_alert=True)
        return
        
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    if not safe_answer_query(query):
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ensure_user_data –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        user_data = ensure_user_data(user_id)
        current_step = user_data.get('step', '')
        
        if query.data == 'start_analysis':
            buttons = [(currency, f'currency_{currency}') for currency in CURRENCY_GROUPS.keys()]
            new_text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>"
            new_markup = create_menu_buttons(buttons)
            
            if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
                cleanup_messages(context, chat_id, user_id)
                msg_id = safe_send_message(context, chat_id, new_text, new_markup)
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)
            user_data['step'] = 'select_currency'

        elif query.data.startswith('currency_'):
            currency = query.data.split('_')[1]
            pairs = CURRENCY_GROUPS.get(currency, [])
            buttons = [(pair, f'pair_{i}') for i, pair in enumerate(pairs)]
            new_text = f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>"
            new_markup = create_menu_buttons(buttons)
            
            if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
                cleanup_messages(context, chat_id, user_id)
                msg_id = safe_send_message(context, chat_id, new_text, new_markup)
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)
            user_data['step'] = 'select_pair'
            user_data['currency'] = currency

        elif query.data.startswith('pair_'):
            pair_idx = int(query.data.split('_')[1])
            currency = user_data.get('currency', '')
            pairs = CURRENCY_GROUPS.get(currency, [])
            if pair_idx < len(pairs):
                symbol = pairs[pair_idx]
                user_data['symbol'] = symbol
                
                buttons = [(tf, f'tf_{i}') for i, tf in enumerate(TIMEFRAMES)]
                new_text = f"üìä <b>–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {symbol}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:"
                new_markup = create_menu_buttons(buttons)
                
                if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
                    cleanup_messages(context, chat_id, user_id)
                    msg_id = safe_send_message(context, chat_id, new_text, new_markup)
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
                user_data['step'] = 'select_timeframe'
            else:
                safe_answer_query(query, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã", show_alert=True)

        elif query.data.startswith('tf_'):
            tf_idx = int(query.data.split('_')[1])
            if tf_idx < len(TIMEFRAMES):
                symbol = user_data.get('symbol', '')
                timeframe = TIMEFRAMES[tf_idx]
                
                context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
                cleanup_messages(context, chat_id, user_id)
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
                    df = get_ohlc_data(symbol, timeframe)
                    indicators = calculate_indicators(df, user_id)
                    
                    if indicators is None:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                    
                    candle_plot = create_candlestick_plot(df)
                    tech_plot = create_technical_plot(df, indicators)
                    
                    if candle_plot is None or tech_plot is None:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
                    
                    signal, emoji, strength = generate_signal(df['close'].values, indicators)
                    
                    try:
                        msg1 = context.bot.send_photo(
                            chat_id=chat_id,
                            photo=candle_plot,
                            caption=f"<b>{symbol} ({timeframe}) - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫</b>\n"
                                   f"üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                            parse_mode='HTML',
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞", callback_data=f'currency_{user_data.get("currency", "")}')]
                            ])
                        )
                        add_message_to_cleanup(user_id, msg1.message_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                        raise
                    
                    try:
                        strength_bar = "üü¢" * strength + "‚ö™" * (5 - strength) if strength > 0 else "‚ö™" * 5
                        msg2 = context.bot.send_photo(
                            chat_id=chat_id,
                            photo=tech_plot,
                            caption=(
                                f"<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {symbol} ({timeframe})</b>\n"
                                f"üìä <b>–°–∏–≥–Ω–∞–ª:</b> {emoji} {signal}\n"
                                f"üí™ <b>–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {strength_bar} ({strength}/5)\n"
                                f"üìà –¶–µ–Ω–∞: {df['close'].iloc[-1]:.5f}\n"
                                f"üîÑ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                            ),
                            parse_mode='HTML',
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞", callback_data=f'currency_{user_data.get("currency", "")}')]
                            ])
                        )
                        add_message_to_cleanup(user_id, msg2.message_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
                        raise
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n{traceback.format_exc()}")
                    msg_id = safe_send_message(
                        context,
                        chat_id,
                        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f'tf_{tf_idx}')],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                        ])
                    )
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            else:
                safe_answer_query(query, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞", show_alert=True)

        elif query.data == 'back':
            handle_back_action(update, context)

        elif query.data == 'back_to_main':
            start(update, context)

        elif query.data == 'settings_menu':
            show_settings_menu(update, context, user_id)
            
        elif query.data == 'reset_settings':
            user_data = ensure_user_data(user_id)
            user_data['settings'] = DEFAULT_SETTINGS.copy()
            safe_answer_query(query, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            show_settings_menu(update, context, user_id)

        elif query.data == 'set_rsi':
            user_data = ensure_user_data(user_id)
            user_data['step'] = 'set_rsi'
            safe_edit_message(
                context,
                chat_id,
                message_id,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è RSI (5-30):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

        elif query.data == 'set_macd':
            user_data = ensure_user_data(user_id)
            user_data['step'] = 'set_macd'
            safe_edit_message(
                context,
                chat_id,
                message_id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MACD –≤ —Ñ–æ—Ä–º–∞—Ç–µ FAST/SLOW/SIGNAL (–Ω–∞–ø—Ä–∏–º–µ—Ä 12/26/9):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

        elif query.data == 'set_bb':
            user_data = ensure_user_data(user_id)
            user_data['step'] = 'set_bb'
            safe_edit_message(
                context,
                chat_id,
                message_id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Bollinger Bands –≤ —Ñ–æ—Ä–º–∞—Ç–µ PERIOD/STDDEV (–Ω–∞–ø—Ä–∏–º–µ—Ä 20/2):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

        elif query.data == 'set_stoch':
            user_data = ensure_user_data(user_id)
            user_data['step'] = 'set_stoch'
            safe_edit_message(
                context,
                chat_id,
                message_id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Stochastic –≤ —Ñ–æ—Ä–º–∞—Ç–µ %K/%D (–Ω–∞–ø—Ä–∏–º–µ—Ä 14/3):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

        elif query.data == 'set_adx':
            user_data = ensure_user_data(user_id)
            user_data['step'] = 'set_adx'
            safe_edit_message(
                context,
                chat_id,
                message_id,
                "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è ADX (5-30):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

            user_data = ensure_user_data(user_id)
            safe_edit_message(
                context,
                chat_id,
                message_id,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='settings_menu')]
                ])
            )

    except Exception as e:
        if "Message is not modified" in str(e):
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            error_handler(update, context, e)

def handle_back_action(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if not query:
        return
        
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not check_access(user_id):
        return
        
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    if not safe_answer_query(query):
        return

    try:
        user_data = ensure_user_data(user_id)
        current_step = user_data.get('step', '')
        
        if current_step == 'select_timeframe':
            currency = user_data.get('currency', '')
            pairs = CURRENCY_GROUPS.get(currency, [])
            buttons = [(pair, f'pair_{i}') for i, pair in enumerate(pairs)]
            new_text = f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É ({currency}):</b>"
            new_markup = create_menu_buttons(buttons)
            
            if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
                cleanup_messages(context, chat_id, user_id)
                msg_id = safe_send_message(context, chat_id, new_text, new_markup)
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)
            user_data['step'] = 'select_pair'
        
        elif current_step == 'select_pair':
            buttons = [(currency, f'currency_{currency}') for currency in CURRENCY_GROUPS.keys()]
            new_text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:</b>"
            new_markup = create_menu_buttons(buttons)
            
            if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
                cleanup_messages(context, chat_id, user_id)
                msg_id = safe_send_message(context, chat_id, new_text, new_markup)
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)
            user_data['step'] = 'select_currency'
        
        elif current_step == 'select_currency':
            start(update, context)
        else:
            start(update, context)
    except Exception as e:
        error_handler(update, context, e)

def show_settings_menu(update: Update, context: CallbackContext, user_id: int) -> None:
    try:
        query = update.callback_query
        if not query:
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_access(user_id):
            return
            
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        cleanup_messages(context, chat_id, user_id)
        
        settings = get_user_settings(user_id)
        buttons = [
            (f"RSI –ü–µ—Ä–∏–æ–¥: {settings['RSI_PERIOD']}", "set_rsi"),
            (f"MACD: {settings['MACD_FAST']}/{settings['MACD_SLOW']}/{settings['MACD_SIGNAL']}", "set_macd"),
            (f"Bollinger Bands: {settings['BB_PERIOD']}/{settings['BB_STDDEV']}", "set_bb"),
            (f"Stochastic: {settings['STOCH_K']}/{settings['STOCH_D']}", "set_stoch"),
            (f"ADX –ü–µ—Ä–∏–æ–¥: {settings['ADX_PERIOD']}", "set_adx"),
            ("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main")
        ]
        
        new_text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:"
        new_markup = create_menu_buttons(buttons, back_button=False)
        
        if not safe_edit_message(context, chat_id, message_id, new_text, new_markup):
            msg_id = safe_send_message(context, chat_id, new_text, new_markup)
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
        user_data = ensure_user_data(user_id)
        user_data['step'] = 'settings_menu'
    except Exception as e:
        error_handler(update, context, e)

def text_handler(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if update.effective_user and update.effective_user.id == BOT_ID:
        return

    if not update.message:
        return
        
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –±–æ—Ç
    if update.message.from_user.is_bot:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –±–æ—Ç–∞ —Å ID: {user_id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not check_access(user_id):
        return
    
    chat_id = update.message.chat_id
    text = update.message.text.strip()
    
    user_data = ensure_user_data(user_id)
    current_step = user_data.get('step', '')
    
    if current_step.startswith('set_'):
        handle_settings_input(update, context, user_id, text)
    else:
        cleanup_messages(context, chat_id, user_id)
        msg_id = safe_send_message(
            context,
            chat_id,
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
            ])
        )
        if msg_id:
            add_message_to_cleanup(user_id, msg_id)

def handle_settings_input(update: Update, context: CallbackContext, user_id: int, text: str) -> None:
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_access(user_id):
            return
            
        chat_id = update.message.chat_id
        cleanup_messages(context, chat_id, user_id)
        
        user_data = ensure_user_data(user_id)
        settings = get_user_settings(user_id)
        current_step = user_data['step']
        
        if current_step == 'set_rsi':
            try:
                value = int(text)
                if 5 <= value <= 30:
                    settings['RSI_PERIOD'] = value
                    msg_id = safe_send_message(
                        context,
                        chat_id,
                        f"‚úÖ –ü–µ—Ä–∏–æ–¥ RSI –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                        ])
                    )
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
                    user_data['step'] = 'settings_menu'
                else:
                    msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 30")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

        elif current_step == 'set_macd':
            try:
                parts = list(map(int, text.split('/')))
                if len(parts) == 3:
                    fast, slow, signal = parts
                    if 5 <= fast < slow <= 50 and 5 <= signal <= 20:
                        settings['MACD_FAST'] = fast
                        settings['MACD_SLOW'] = slow
                        settings['MACD_SIGNAL'] = signal
                        msg_id = safe_send_message(
                            context,
                            chat_id,
                            f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MACD –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {fast}/{slow}/{signal}",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                            ])
                        )
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                        user_data['step'] = 'settings_menu'
                    else:
                        msg_id = safe_send_message(context, chat_id, 
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12/26/9)")
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                else:
                    msg_id = safe_send_message(context, chat_id, 
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12/26/9)")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y/Z")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

        elif current_step == 'set_bb':
            try:
                parts = list(map(int, text.split('/')))
                if len(parts) == 2:
                    period, stddev = parts
                    if 5 <= period <= 50 and 1 <= stddev <= 3:
                        settings['BB_PERIOD'] = period
                        settings['BB_STDDEV'] = stddev
                        msg_id = safe_send_message(
                            context,
                            chat_id,
                            f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Bollinger Bands –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {period}/{stddev}",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                            ])
                        )
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                        user_data['step'] = 'settings_menu'
                    else:
                        msg_id = safe_send_message(context, chat_id, 
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20/2)")
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                else:
                    msg_id = safe_send_message(context, chat_id, 
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20/2)")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

        elif current_step == 'set_stoch':
            try:
                parts = list(map(int, text.split('/')))
                if len(parts) == 2:
                    k, d = parts
                    if 5 <= k <= 30 and 1 <= d <= 10:
                        settings['STOCH_K'] = k
                        settings['STOCH_D'] = d
                        msg_id = safe_send_message(
                            context,
                            chat_id,
                            f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Stochastic –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {k}/{d}",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                            ])
                        )
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                        user_data['step'] = 'settings_menu'
                    else:
                        msg_id = safe_send_message(context, chat_id, 
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14/3)")
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                else:
                    msg_id = safe_send_message(context, chat_id, 
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Å–ª–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14/3)")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

        elif current_step == 'set_adx':
            try:
                value = int(text)
                if 5 <= value <= 30:
                    settings['ADX_PERIOD'] = value
                    msg_id = safe_send_message(
                        context,
                        chat_id,
                        f"‚úÖ –ü–µ—Ä–∏–æ–¥ ADX –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {value}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                        ])
                    )
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
                    user_data['step'] = 'settings_menu'
                else:
                    msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 30")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

            try:
                parts = text.split('/')
                if len(parts) == 2:
                    period = int(parts[0])
                    multiplier = float(parts[1])
                    if 5 <= period <= 30 and 1.0 <= multiplier <= 5.0:
                        msg_id = safe_send_message(
                            context,
                            chat_id,
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_menu')]
                            ])
                        )
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                        user_data['step'] = 'settings_menu'
                    else:
                        msg_id = safe_send_message(context, chat_id, 
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10/3.0)")
                        if msg_id:
                            add_message_to_cleanup(user_id, msg_id)
                else:
                    msg_id = safe_send_message(context, chat_id, 
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 2 –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–ª–µ—à (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10/3.0)")
                    if msg_id:
                        add_message_to_cleanup(user_id, msg_id)
            except ValueError:
                msg_id = safe_send_message(context, chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X/Y")
                if msg_id:
                    add_message_to_cleanup(user_id, msg_id)

    except Exception as e:
        error_handler(update, context, e)

def error_handler(update: Optional[Update], context: CallbackContext, error: Exception) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {str(error)}\n{traceback.format_exc()}")
    
    try:
        if update and update.message:
            chat_id = update.message.chat_id
            user_id = update.message.from_user.id
            cleanup_messages(context, chat_id, user_id)
            msg_id = safe_send_message(
                context,
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
        elif update and update.callback_query and update.callback_query.message:
            chat_id = update.callback_query.message.chat_id
            user_id = update.callback_query.from_user.id
            cleanup_messages(context, chat_id, user_id)
            msg_id = safe_send_message(
                context,
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            if msg_id:
                add_message_to_cleanup(user_id, msg_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {str(e)}")

def cleanup_old_users():
    now = time.time()
    for user_id in list(user_data.keys()):
        if now - user_data[user_id].get('last_activity', 0) > 86400:
            del user_data[user_id]
    for user_id in list(user_messages.keys()):
        if user_id not in user_data:
            del user_messages[user_id]

def main() -> None:
    try:
        updater = Updater(TOKEN, use_context=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_ID
        global BOT_ID
        BOT_ID = updater.bot.id
        
        dp = updater.dispatcher

        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("help", help_command))
        dp.add_handler(CallbackQueryHandler(button_handler))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))
        dp.add_error_handler(lambda u, c: error_handler(u, c, c.error))

        job_queue = updater.job_queue
        job_queue.run_repeating(lambda _: cleanup_old_users(), interval=3600, first=0)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}\n{traceback.format_exc()}")

if __name__ == '__main__':
    main()
